import React, { useState, useRef } from "react";
import { generateTextFromPrompt, saveProject, processTextWithAI } from "../services/api.js";

const ProjectModal = ({ isOpen, onClose, onProjectCreated, token }) => {
    const [formData, setFormData] = useState({
        title: "",
        prompt: "",
    });
    const [generatedText, setGeneratedText] = useState("");
    const [loading, setLoading] = useState(false);
    const [saveLoading, setSaveLoading] = useState(false);
    const [step, setStep] = useState(1);
    const [selectedFile, setSelectedFile] = useState(null);
    const [fileContent, setFileContent] = useState("");
    const [uploadMethod, setUploadMethod] = useState("text");
    const [error, setError] = useState("");
    const fileInputRef = useRef(null);

    const handleFileSelect = (event) => {
        const file = event.target.files[0];
        if (!file) return;

        console.log("Selected file:", file.name, file.type, file.size);
        setError("");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        const allowedExtensions = ['txt', 'pdf', 'doc', 'docx'];
        const fileExtension = file.name.split('.').pop().toLowerCase();
        
        if (!allowedExtensions.includes(fileExtension)) {
            setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT, PDF –∏–ª–∏ DOC/DOCX");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        if (file.size > 10 * 1024 * 1024) {
            setError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10MB");
            return;
        }

        setSelectedFile(file);
        
        // –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if (fileExtension === 'txt') {
            readTextFileContent(file);
        } else {
            // –î–ª—è PDF –∏ DOC —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            setFileContent(`–§–∞–π–ª ${fileExtension.toUpperCase()}: ${file.name}\n\n–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª, –Ω–æ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.`);
            setFormData(prev => ({
                ...prev,
                prompt: `–°–æ–∑–¥–∞–π –ª–µ–∫—Ü–∏—é –Ω–∞ —Ç–µ–º—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ñ–∞–π–ª–æ–º: ${file.name}`
            }));
        }
    };

    const readTextFileContent = (file) => {
        const reader = new FileReader();
        
        reader.onload = (e) => {
            const content = e.target.result;
            setFileContent(content.substring(0, 1000) + (content.length > 1000 ? "\n\n..." : ""));
            setFormData(prev => ({
                ...prev,
                prompt: content.substring(0, 3000) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º—Ç–∞
            }));
        };

        reader.onerror = () => {
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞");
            setSelectedFile(null);
            setFileContent("");
        };

        reader.readAsText(file, 'UTF-8');
    };

    const handleGenerate = async () => {
        if (uploadMethod === "text" && !formData.prompt.trim()) {
            setError("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
            return;
        }

        if (uploadMethod === "file" && !selectedFile) {
            setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª");
            return;
        }

        setLoading(true);
        setError("");

        try {
            let result;
            
            if (uploadMethod === "file" && selectedFile) {
                const fileExtension = selectedFile.name.split('.').pop().toLowerCase();
                
                if (fileExtension === 'txt') {
                    // –î–ª—è TXT —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    const text = await readFileAsText(selectedFile);
                    result = await processTextWithAI(text);
                } else {
                    // –î–ª—è PDF –∏ DOC - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    result = await generateTextFromPrompt(
                        `–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ª–µ–∫—Ü–∏—é –Ω–∞ —Ç–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ñ–∞–π–ª–æ–º "${selectedFile.name}". 
                        –õ–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
                        –†–∞—Å–∫—Ä–æ–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã.`
                    );
                }
            } else {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
                result = await generateTextFromPrompt(formData.prompt);
            }
            
            setGeneratedText(result.data.generatedText || result.data.summary);
            setStep(2);
        } catch (error) {
            console.error("Generation error:", error);
            setError("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + error.message);
        } finally {
            setLoading(false);
        }
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const readFileAsText = (file) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"));
            reader.readAsText(file, 'UTF-8');
        });
    };

    const handleSave = async () => {
        if (!formData.title.trim()) {
            setError("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
            return;
        }

        if (!generatedText) {
            setError("–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
            return;
        }

        setSaveLoading(true);

        try {
            const projectData = {
                title: formData.title.trim(),
                prompt: uploadMethod === "file" ? 
                    `–§–∞–π–ª: ${selectedFile?.name || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"}` : 
                    formData.prompt.trim(),
                generatedText: generatedText,
                fileType: selectedFile?.type || null,
                fileName: selectedFile?.name || null,
                fileSize: selectedFile?.size || null,
            };

            await saveProject(projectData, token);

            if (onProjectCreated) {
                onProjectCreated();
            }
            
            handleClose();
            
        } catch (error) {
            console.error("Save error:", error);
            setError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
        } finally {
            setSaveLoading(false);
        }
    };

    const handleClose = () => {
        setFormData({ title: "", prompt: "" });
        setGeneratedText("");
        setSelectedFile(null);
        setFileContent("");
        setUploadMethod("text");
        setStep(1);
        setError("");
        setSaveLoading(false);
        if (fileInputRef.current) {
            fileInputRef.current.value = "";
        }
        if (onClose) {
            onClose();
        }
    };

    const removeFile = () => {
        setSelectedFile(null);
        setFileContent("");
        setError("");
        if (fileInputRef.current) {
            fileInputRef.current.value = "";
        }
    };

    const handleUploadAreaClick = () => {
        if (fileInputRef.current) {
            fileInputRef.current.click();
        }
    };

    if (!isOpen) return null;

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <div className="modal-header">
                    <h2>üÜï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</h2>
                    <button onClick={handleClose} className="close-btn">
                        ‚úï
                    </button>
                </div>

                {error && (
                    <div className="error-message" style={{
                        background: "#f8d7da",
                        color: "#721c24",
                        padding: "12px",
                        borderRadius: "6px",
                        marginBottom: "15px",
                        border: "1px solid #f5c6cb"
                    }}>
                        {error}
                    </div>
                )}

                {step === 1 && (
                    <div className="modal-body">
                        <div className="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</label>
                            <input
                                type="text"
                                value={formData.title}
                                onChange={(e) =>
                                    setFormData({
                                        ...formData,
                                        title: e.target.value,
                                    })
                                }
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                            />
                        </div>

                        <div className="upload-method-selector">
                            <label>–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:</label>
                            <div className="method-buttons">
                                <button
                                    type="button"
                                    className={`method-btn ${uploadMethod === "text" ? "active" : ""}`}
                                    onClick={() => {
                                        setUploadMethod("text");
                                        setError("");
                                    }}
                                >
                                    üìù –¢–µ–∫—Å—Ç
                                </button>
                                <button
                                    type="button"
                                    className={`method-btn ${uploadMethod === "file" ? "active" : ""}`}
                                    onClick={() => {
                                        setUploadMethod("file");
                                        setError("");
                                    }}
                                >
                                    üìé –§–∞–π–ª
                                </button>
                            </div>
                        </div>

                        {uploadMethod === "text" ? (
                            <div className="form-group">
                                <label>–ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</label>
                                <textarea
                                    value={formData.prompt}
                                    onChange={(e) =>
                                        setFormData({
                                            ...formData,
                                            prompt: e.target.value,
                                        })
                                    }
                                    placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å..."
                                    rows="6"
                                />
                                <div style={{ fontSize: "12px", color: "#666", marginTop: "5px" }}>
                                    –ù–∞–ø—Ä–∏–º–µ—Ä: "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏" –∏–ª–∏ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ"
                                </div>
                            </div>
                        ) : (
                            <div className="file-upload-section">
                                <label>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª:</label>
                                
                                <input
                                    ref={fileInputRef}
                                    type="file"
                                    accept=".txt,.pdf,.doc,.docx"
                                    onChange={handleFileSelect}
                                    style={{ display: 'none' }}
                                />
                                
                                <div 
                                    className="file-upload-area"
                                    onClick={handleUploadAreaClick}
                                    style={{ cursor: 'pointer' }}
                                >
                                    {selectedFile ? (
                                        <div className="file-info">
                                            <div className="file-name">üìÑ {selectedFile.name}</div>
                                            <div className="file-size">
                                                {(selectedFile.size / 1024).toFixed(2)} KB
                                            </div>
                                            <div className="file-type">
                                                –¢–∏–ø: {selectedFile.name.split('.').pop().toUpperCase()}
                                            </div>
                                            {fileContent && (
                                                <div className="file-preview">
                                                    <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong>
                                                    <p style={{ whiteSpace: 'pre-wrap' }}>{fileContent}</p>
                                                </div>
                                            )}
                                            <button
                                                type="button"
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    removeFile();
                                                }}
                                                className="remove-file-btn"
                                            >
                                                –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
                                            </button>
                                        </div>
                                    ) : (
                                        <div className="upload-prompt">
                                            <div className="upload-icon">üìé</div>
                                            <p>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</p>
                                            <small>
                                                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, PDF, DOC, DOCX (–¥–æ 10MB)<br/>
                                                TXT —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é, PDF/DOC - –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
                                            </small>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}

                        <div className="modal-actions">
                            <button
                                onClick={handleClose}
                                className="btn-secondary"
                                disabled={loading}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                onClick={handleGenerate}
                                disabled={
                                    (uploadMethod === "text" && !formData.prompt.trim()) ||
                                    (uploadMethod === "file" && !selectedFile) ||
                                    loading
                                }
                                className="btn-primary"
                            >
                                {loading
                                    ? "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..."
                                    : uploadMethod === "file" 
                                        ? "üìÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª" 
                                        : "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"}
                            </button>
                        </div>
                    </div>
                )}

                {step === 2 && (
                    <div className="modal-body">
                        <div className="preview-section">
                            <h3>üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</h3>
                            <div className="generated-text">
                                {generatedText}
                            </div>
                        </div>

                        <div className="modal-actions">
                            <button
                                onClick={() => {
                                    setStep(1);
                                    setError("");
                                }}
                                className="btn-secondary"
                                disabled={saveLoading}
                            >
                                ‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
                            </button>
                            <button
                                onClick={handleSave}
                                className="btn-primary"
                                disabled={saveLoading || !generatedText}
                            >
                                {saveLoading ? "‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"}
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ProjectModal;